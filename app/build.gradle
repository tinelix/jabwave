buildscript {
    dependencies {
        classpath project(':app')
    }
}

plugins {
    id 'com.android.application'
}

def getGitHubCommit = {
    try {
        def hashOutput = new ByteArrayOutputStream()
        def changeOutput = new ByteArrayOutputStream()
        def gitVersionName
        exec {
            commandLine 'git', 'rev-list', '--max-count=1', 'HEAD'
            standardOutput = hashOutput
        }
        exec {
            commandLine 'git', 'diff-index', '--shortstat', 'HEAD'
            standardOutput = changeOutput
        }
        gitVersionName = hashOutput.toString().trim().substring(0, 7);
        if (!changeOutput.toString().trim().empty) {
            def pattern = Pattern.compile("\\d+");
            def matcher = pattern.matcher(changeOutput.toString().trim())
            if (matcher.find()) {
                gitVersionName += "-" + matcher.group()
            }
        }
        return gitVersionName
    } catch (ignored) {
        return "UNKNOWN";
    }
}

def getTDAppToken = {
    /*
         HOW TO STORE TELEGRAM API KEY SAFELY?

         1.  Create file named 'tdlib.prop' in '.signing' directory.
         2.  Generate Base58 hash according to the format of the original string:
             '<api_id>.<api_hash>'
             (without quotation marks)
         3.  Store 'tdlib.prop' in a place inaccessible to third parties.
    */
    Properties tdlib_props = new Properties();
    if (file('.signing/tdlib.prop').exists()) {
        tdlib_props.load(new FileInputStream(file(".signing/tdlib.prop")))
        return "${tdlib_props['APP_TOKEN']}"
    } else {
        return "UNKNOWN.UNKNOWN"
    }
}

android {
    namespace 'dev.tinelix.jabwave'
    compileSdk 34

    defaultConfig {
        applicationId "dev.tinelix.jabwave"
        minSdk 19
        targetSdk 34
        versionCode 1
        versionName "0.0.1-prealpha"
        multiDexEnabled true

    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField "String", "SOURCE_CODE", "\"https://github.com/tinelix/jabwave/tree/tg-main\""
            buildConfigField "String", "TDLIB_APP_TOKEN", "\"${getTDAppToken()}\""
        }

        debug {
            buildConfigField "String", "SOURCE_CODE", "\"https://github.com/tinelix/jabwave/tree/tg-main\""
            buildConfigField "String", "TDLIB_APP_TOKEN", "\"${getTDAppToken()}\""
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    buildFeatures {
        viewBinding true
    }
}

dependencies {
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.11.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'androidx.navigation:navigation-fragment:2.7.7'
    implementation 'androidx.navigation:navigation-ui:2.7.7'
    implementation ("org.igniterealtime.smack:smack-android-extensions:4.4.0") {
        exclude module: 'xpp3'
    }
    implementation 'org.jxmpp:jxmpp-jid:1.0.3'
    implementation "org.igniterealtime.smack:smack-tcp:4.4.0"
    implementation "org.igniterealtime.smack:smack-im:4.4.0"
    implementation 'com.github.bumptech.glide:glide:4.12.0'
    implementation project(path: ':tdlib')
    annotationProcessor ('com.github.bumptech.glide:compiler:4.12.0')
    implementation 'com.github.luizgrp:SectionedRecyclerViewAdapter:v3.2.0'
    implementation "androidx.emoji2:emoji2:1.4.0"
    implementation 'com.github.mediapark-pk:Base58-android:0.1'
    implementation 'com.android.support:multidex:1.0.3'
    implementation 'org.apmem.tools:layouts:1.10@aar'
}